https://blog.csdn.net/zhayushui/article/details/80433768?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link   conda命令大全


conda install cudatoolkit=10.2 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/linux-64/
conda install cudatoolkit=10.2 -c https://mirrors.ustc.edu.cn/anaconda/pkgs/free/win-64/
conda install cudnn=7.6.5 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/win-64/
去pytorch官网，选择往期版本，用conda安装

虚拟环境不安装带cuda的pytorch，会提示AssertionError: Torch not compiled with CUDA enabled 需要用pip或者conda安装带cuda后缀的pytorch版本
虚拟环境安装带cuda后缀的pytorch版本，会自动安装cudatoolkit
或者可以先在虚拟环境中安装cuda和cudnn版本，在去安装对应版本的pytorch版本
最好用conda安装，尽量不用pip安装 conda会自动安装对应cuda版本的pytorch
总结：
1.可以直接用conda安装带cudatoolkit后缀的命令来安装pytorch，会自动安装cudatoolkit，同时会有一个对应的cudnn版本(不可见)
conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=10.2
2.也可以用conda手动安装cudatoolkit和cudnn版本，再用conda安装pytorch，这样会显示出cudatoolkit和cudnn版本
conda install cudatoolkit=10.2 -c https://mirrors.ustc.edu.cn/anaconda/pkgs/free/win-64/
conda install cudnn=7.6.5 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/win-64/
conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0
这两种方式都可以安装pytorch-gpu并成功运行

conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=11.1 -c pytorch -c conda-forge
pip install torch==1.8.0+cu111 torchvision==0.9.0+cu111 torchaudio==0.8.0 -f https://download.pytorch.org/whl/torch_stable.html

conda clean -a 会清理多余的pkgs
conda remove -n xxxx --all   //删除xxxx虚拟环境



用conda安装paddlepaddle-gpu
添加清华源（可选）
对于国内用户无法连接到Anaconda官方源的可以按照以下命令添加清华源:

conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --set show_channel_urls yes

对于 CUDA 10.1，需要搭配cuDNN 7 (cuDNN>=7.6.5, 多卡环境下 NCCL>=2.7)，安装命令为:
conda install paddlepaddle-gpu==2.2.1 cudatoolkit=10.1 --channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/

对于 CUDA 10.2，需要搭配cuDNN 7 (cuDNN>=7.6.5, 多卡环境下 NCCL>=2.7)，安装命令为:
conda install paddlepaddle-gpu==2.2.1 cudatoolkit=10.2 --channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/

对于 CUDA 11.2，需要搭配cuDNN 8.1.1(多卡环境下 NCCL>=2.7)，安装命令为:
conda install paddlepaddle-gpu==2.2.1 cudatoolkit=11.2 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/ -c conda-forge






检验当前conda的版本

conda -V

查看已有的虚拟环境
conda env list 

创建虚拟环境和删除虚拟环境
anaconda命令创建python版本为x.x，名字为env_name的虚拟环境。
env_name文件可以在Anaconda安装目录envs文件下找到。

# 创建
conda create -n env_name python=x.x
# 删除
conda remove -n env_name --all

激活虚拟环境和关闭虚拟环境
# 激活
conda activate env_name
# 关闭
conda deactivate
 
# 复制虚拟环境  创建前面，复制后面
conda create -n conda-env2 --clone conda-env1

对虚拟环境中安装和删除额外的包
如果没有进入到当前虚拟环境，使用-n env_name 的方式去指定对某个虚拟环境安装软件，命令如下：

# 查看指定环境下已安装的package
conda list -n env_name
# 安装指定环境下某个package
conda install -n env_name [package]
# 删除指定环境下某个package
conda remove -n env_name [package]
# 更新指定环境下某个package
conda update -n env_name [package]

如果已经进入到某个虚拟环境，则直接使用以下命令：

# 查看已安装的package
conda list
# 安装某个package
conda install [package]
# 删除某个package
conda remove [package]
# 更新某个package
conda update [package]

# 更新conda，保持conda最新
conda update conda

安装完anaconda后，发现每次打开终端后都会自动进入到base的虚拟环境中去，可以使用conda deactivate退出。也可以关闭自动打开的虚拟环境，命令如下

conda config --set auto_activate_base false


conda list --reversion
conda install --rev 0




conda list | grep cuda，然后就会获得虚拟环境下安装的版本
conda search cudnn --info  查看所有cuda版本和对应的cudnn版本

查询显卡算力
进入目录 deviceQuery.exe
>> cd D:\CUDA\NVIDIA GPU Computing Toolkit\CUDA\v10.1\extras\demo_suite
 
运行 deviceQuery.exe
>> ./deviceQuery.exe
我的显卡算力为7.5
Device 0: "NVIDIA GeForce GTX 1660 Ti"
  CUDA Driver Version / Runtime Version          11.6 / 11.0
  CUDA Capability Major/Minor version number:    7.5
、deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 11.6, CUDA Runtime Version = 11.0, NumDevs = 1, Device0 = NVIDIA GeForce GTX 1660 Ti

E:\CUDA\v11.0\bin>nvcc -V
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2020 NVIDIA Corporation
Built on Wed_Jul_22_19:09:35_Pacific_Daylight_Time_2020
Cuda compilation tools, release 11.0, V11.0.221
Build cuda_11.0_bu.relgpu_drvr445TC445_37.28845127_0






2023年3月17日记录：
如何再pycharm对单个项目建立virtualenv环境，然后对这个项目单独的virtualenv环境添加其他软件包
首先，在pycharm中拉取项目，一般首次拉取，系统会提示你创建venv环境，可以创建，也可以自己主动到设置中项目下添加virtualenv环境（注意不是conda环境）。
如何向这个环境中添加其他软件包：
1.打开cmd普通的命令提示符
2.将目录转到项目所在的目录下， f: cd ...
3.激活virtualenv环境：输入：env\Scripts\activate.bat  
激活样例：
F:\WorkSpace\ChuanhuChatGPT>venv\Scripts\activate.bat
(venv) F:\WorkSpace\ChuanhuChatGPT>
或者：直接在pycharm中或者带有（base）标志的命令行中，输入：.\venv\Scripts\activate
也可以进入venv环境
激活样例：
(base) PS F:\WorkSpace\ChuanhuChatGPT> .\venv\Scripts\activate
(base) (venv) PS F:\WorkSpace\ChuanhuChatGPT>
其中，“venv”是你的 Virtualenv 环境所在的文件夹名称。激活成功后，你会在命令行窗口的左侧看到环境名称，例如“(venv)”
4.然后路径前面显示（venv）即激活环境，没其他问题就可以正常用一般命令安装软件
5.如果你想停止使用这个环境，可以在命令行窗口中输入以下命令来停止环境：deactivate
6.如果下载软件包遇到跟网络通信有关的问题，请将电脑中的vpn关闭，或者把pip的镜像源给清除，用原有的源地址。




关于pip.ini配置文件的相关问题：
pip.ini里面可以配置pip下载的镜像源，可以添加多个镜像源，如下：
[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple/
extra-index-url = 
    https://mirrors.aliyun.com/pypi/simple/
    https://pypi.mirrors.ustc.edu.cn/simple/
    https://pypi.org/simple/

[install]
trusted-host = pypi.tuna.tsinghua.edu.cn

其中，index-url 是主要的镜像源，extra-index-url 是备用的镜像源，您可以添加多个备用的镜像源，每个镜像源之间需要缩进4个空格
但是注意还是不要添加注释，不然要报错

在pip的配置文件中，[global]和[install]是两个不同的section，它们用于指定不同的配置项。
[global] section是全局配置，适用于所有pip操作，包括安装、卸载、更新等。在[global] section中配置的选项会影响到所有pip操作。
[install] section则是用于安装软件包时的配置项。这些选项仅适用于pip install命令，它们会覆盖[global] section中的同名选项。在[install] section中配置的选项只会影响到当前安装的软件包，不会影响到其他pip操作。
一般来说，[global] section中的配置项是全局生效的，而[install] section中的配置项是针对某个软件包的特定需求而设置的。


如果在用pip下载的时候，不用镜像源，只用源地址，但是又不想删除镜像源，就用以下命令：
pip install package_name --index-url https://pypi.org/simple/
这个命令会使用官方的PyPI源进行下载，而不会使用你在配置文件中设置的国内镜像源。如果想临时使用其他的镜像源可以在命令中使用--extra-index-url参数指定，例如：
pip install package_name --extra-index-url https://pypi.tuna.tsinghua.edu.cn/simple
这个命令会在下载package_name的时候同时从清华镜像源进行下载。注意，--extra-index-url只是在当前命令中使用，不会影响到全局配置文件。

如果你没有指定具体的镜像源地址，pip会默认使用第一个镜像源地址来下载软件包。如果第一个镜像源下载失败，则会尝试使用下一个镜像源地址。如果最后所有的镜像源都无法下载，则会报错提示下载失败。因此，你可以根据需要调整镜像源的顺序，来优化下载速度和稳定性。

清除pip.ini的镜像源：
pip config unset global.index-url
这将删除全局pip配置中的index-url选项，从而恢复pip默认的源
